@page "/clients"
@using ReportHub.Web.Models.Clients
@inject IClientService ClientService
@rendermode InteractiveServer

<h3 class="text-xl font-semibold mb-4">Client List</h3>

@if (clients == null)
{
    <p>Loading clients...</p>
}
else
{
    if (clients.Any())
    {
        <div class="row">
            <table class="table table-bordered table-striped">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="border px-4 py-2 text-left cursor-pointer" @onclick="() => SortBy(nameof(ClientForGettingDto.Id))">
                            ID @SortIndicator(nameof(ClientForGettingDto.Id))
                        </th>
                        <th class="border px-4 py-2 text-left cursor-pointer" @onclick="() => SortBy(nameof(ClientForGettingDto.Name))">
                            Name @SortIndicator(nameof(ClientForGettingDto.Name))
                        </th>
                        <th class="border px-4 py-2 text-left cursor-pointer" @onclick="() => SortBy(nameof(ClientForGettingDto.Specialization))">
                            Specialization @SortIndicator(nameof(ClientForGettingDto.Specialization))
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var client in clients)
                    {
                        <tr>
                            <td class="border px-4 py-2">@client.Id</td>
                            <td class="border px-4 py-2">@client.Name</td>
                            <td class="border px-4 py-2">@client.Specialization</td>
                            <td class="border px-4 py-2">
                                <button class="btn btn-primary"
                                        @onclick="() => NavigateToDetails(client)">
                                    Details
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    }
    else
    {
        <p>No clients found on this page.</p>
    }


    <div class="row mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-start">

                <li class="page-item @( _page == 1 ? "disabled" : "" )">
                    <button class="page-link" @onclick="PreviousPage">Previous</button>
                </li>

                <li class="page-item active">
                    <span class="page-link">
                        Page @_page
                    </span>
                </li>

                <li class="page-item @(clients == null || clients.Count() < _pageSize ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Next</button>
                </li>

            </ul>
        </nav>
    </div>


}

@code {
    [Inject] SelectedClientState SelectedClientState { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }


    private IEnumerable<ClientForGettingDto> clients;
    private int _page = 1;
    private int _pageSize = 10;

    private string _sortBy = nameof(ClientForGettingDto.Id);
    private bool _ascending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    private async Task LoadClientsAsync()
    {
        clients = await ClientService.GetClientsAsync(_page, _pageSize, _sortBy, _ascending);
    }

    private async Task NextPage()
    {
        _page++;
        await LoadClientsAsync();
    }

    private async Task PreviousPage()
    {
        if (_page > 1)
        {
            _page--;
            await LoadClientsAsync();
        }
    }

    private async Task SortBy(string column)
    {
        if (_sortBy == column)
        {
            _ascending = !_ascending; // toggle sort direction
        }
        else
        {
            _sortBy = column;
            _ascending = true; // default ascending
        }

        _page = 1; // reset to first page on sort change
        await LoadClientsAsync();
    }

    private MarkupString SortIndicator(string column)
    {
        if (_sortBy != column) return new MarkupString("");
        var symbol = _ascending ? "↑" : "↓";
        return new MarkupString($"<span>{symbol}</span>");
    }


    private void NavigateToDetails(ClientForGettingDto client)
    {
        SelectedClientState.SelectedClient = client;
        NavigationManager.NavigateTo("/client-details");
    }
}
